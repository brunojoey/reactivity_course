[{"/Users/josephbruno/reactivity_course/client/src/index.tsx":"1","/Users/josephbruno/reactivity_course/client/src/reportWebVitals.ts":"2","/Users/josephbruno/reactivity_course/client/src/app/layout/App.tsx":"3","/Users/josephbruno/reactivity_course/client/src/features/nav/NavBar.tsx":"4","/Users/josephbruno/reactivity_course/client/src/features/activities/dashboard/ActivityDashboard.tsx":"5","/Users/josephbruno/reactivity_course/client/src/features/activities/dashboard/ActivityList.tsx":"6","/Users/josephbruno/reactivity_course/client/src/features/activities/details/ActivityDetails.tsx":"7","/Users/josephbruno/reactivity_course/client/src/features/activities/form/ActivityForm.tsx":"8","/Users/josephbruno/reactivity_course/client/src/app/api/agent.ts":"9","/Users/josephbruno/reactivity_course/client/src/app/layout/LoadingComponent.tsx":"10","/Users/josephbruno/reactivity_course/client/src/app/stores/activityStore.ts":"11"},{"size":568,"mtime":1609095563589,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1609095184181,"results":"14","hashOfConfig":"13"},{"size":2321,"mtime":1610131921044,"results":"15","hashOfConfig":"13"},{"size":748,"mtime":1610133234136,"results":"16","hashOfConfig":"13"},{"size":1943,"mtime":1610132770317,"results":"17","hashOfConfig":"13"},{"size":1888,"mtime":1610131691966,"results":"18","hashOfConfig":"13"},{"size":1435,"mtime":1610131567979,"results":"19","hashOfConfig":"13"},{"size":2926,"mtime":1610133480521,"results":"20","hashOfConfig":"13"},{"size":1248,"mtime":1609955568456,"results":"21","hashOfConfig":"13"},{"size":340,"mtime":1609868057537,"results":"22","hashOfConfig":"13"},{"size":1532,"mtime":1610133113128,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"11kpjtq",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/josephbruno/reactivity_course/client/src/index.tsx",[],["49","50"],"/Users/josephbruno/reactivity_course/client/src/reportWebVitals.ts",[],"/Users/josephbruno/reactivity_course/client/src/app/layout/App.tsx",["51","52"],"import { useState, useEffect, Fragment, SyntheticEvent, useContext } from \"react\";\nimport NavBar from \"../../features/nav/NavBar\";\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\nimport { IActivity } from \"../models/activity\";\nimport { Container } from \"semantic-ui-react\";\nimport \"./styles.css\";\nimport agent from \"../api/agent\";\nimport LoadingComponent from \"./LoadingComponent\";\nimport ActivityStore from '../stores/activityStore';\nimport { observer } from \"mobx-react-lite\";\n\nconst App = () => {\n  const activityStore = useContext(ActivityStore);\n  const [activities, setActivities] = useState<IActivity[]>([]);\n  const [selectedActivity, setSelectedActivity] = useState<IActivity | null>(\n    null\n  );\n  const [editMode, setEditMode] = useState(false);\n  // const [loading, setLoading] = useState(true);\n  const [submitting, setSubmitting] = useState(false);\n  const [target, setTarget] = useState('');\n\n  const handleEditActivity = (activity: IActivity) => {\n    setSubmitting(true);\n    agent.Activities.update(activity).then(() => {\n      setActivities([...activities.filter(a => a.id !== activity.id), activity]);\n      setSelectedActivity(activity);\n      setEditMode(false);\n    }).then(() => setSubmitting(false));\n  };\n\n  const handleDeleteActivity = (event: SyntheticEvent<HTMLButtonElement>, id: string) => {\n    setSubmitting(true);\n    setTarget(event.currentTarget.name);\n    agent.Activities.delete(id).then(() => {\n      setActivities([...activities.filter(a => a.id !== id)])\n    }).then(() => setSubmitting(false));\n  };\n\n  useEffect(() => {\n    activityStore.loadActivities();\n  }, [activityStore]);\n  // [] makes sure the useEffect never runs more than once\n\n  if (activityStore.loadingInitial) return <LoadingComponent content='Loading Activities...'/>;\n\n  return (\n    <Fragment>\n      <NavBar />\n      <Container style={{ marginTop: \"7em\" }}>\n        <ActivityDashboard\n          setSelectedActivity={setSelectedActivity}\n          setEditMode={setEditMode}\n          editActivity={handleEditActivity}\n          deleteActivity={handleDeleteActivity}\n          submitting={submitting}\n          target={target}\n        />\n      </Container>\n    </Fragment>\n  );\n};\n\n// the app now serves as an observer of the activity store\nexport default observer(App);\n","/Users/josephbruno/reactivity_course/client/src/features/nav/NavBar.tsx",[],"/Users/josephbruno/reactivity_course/client/src/features/activities/dashboard/ActivityDashboard.tsx",[],"/Users/josephbruno/reactivity_course/client/src/features/activities/dashboard/ActivityList.tsx",["53"],"import { observer } from \"mobx-react-lite\";\nimport { SyntheticEvent, useContext } from \"react\";\nimport { Item, Button, Label, Segment } from \"semantic-ui-react\";\nimport { IActivity } from \"../../../app/models/activity\";\nimport ActivityStore from '../../../app/stores/activityStore';\n\ninterface IProps {\n  deleteActivity: (e: SyntheticEvent<HTMLButtonElement>, id: string) => void;\n  submitting: boolean;\n  target: string;\n};\n\nconst ActivityList: React.FC<IProps> = ({\n  deleteActivity,\n  submitting,\n  target,\n}) => {\n\n  const activityStore = useContext(ActivityStore);\n  const { activities, selectActivity } = activityStore;\n\n  return (\n    <Segment clearing>\n      <Item.Group divided>\n        {activities.map(activity => (\n          <Item key={activity.id}>\n            <Item.Content>\n              <Item.Header as=\"a\">{activity.title}</Item.Header>\n              <Item.Meta>{activity.date}</Item.Meta>\n              <Item.Description>\n                <div>{activity.description}</div>\n                <div>\n                  {activity.city}, {activity.venue}\n                </div>\n              </Item.Description>\n              <Item.Extra>\n                <Button\n                  onClick={() => selectActivity(activity.id)}\n                  floated=\"right\"\n                  content=\"View\"\n                  color=\"blue\"\n                />\n                <Button\n                  name={activity.id}\n                  loading={target === activity.id && submitting}\n                  onClick={(e) => deleteActivity(e, activity.id)}\n                  floated=\"right\"\n                  content=\"Delete\"\n                  color=\"red\"\n                />\n                <Label basic content={activity.category} />\n              </Item.Extra>\n            </Item.Content>\n          </Item>\n        ))}\n      </Item.Group>\n    </Segment>\n  );\n};\n\nexport default observer(ActivityList);","/Users/josephbruno/reactivity_course/client/src/features/activities/details/ActivityDetails.tsx",[],"/Users/josephbruno/reactivity_course/client/src/features/activities/form/ActivityForm.tsx",[],"/Users/josephbruno/reactivity_course/client/src/app/api/agent.ts",[],"/Users/josephbruno/reactivity_course/client/src/app/layout/LoadingComponent.tsx",[],"/Users/josephbruno/reactivity_course/client/src/app/stores/activityStore.ts",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":15,"column":10,"nodeType":"60","messageId":"61","endLine":15,"endColumn":26},{"ruleId":"58","severity":1,"message":"62","line":18,"column":10,"nodeType":"60","messageId":"61","endLine":18,"endColumn":18},{"ruleId":"58","severity":1,"message":"63","line":4,"column":10,"nodeType":"60","messageId":"61","endLine":4,"endColumn":19},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"@typescript-eslint/no-unused-vars","'selectedActivity' is assigned a value but never used.","Identifier","unusedVar","'editMode' is assigned a value but never used.","'IActivity' is defined but never used.","no-global-assign","no-unsafe-negation"]