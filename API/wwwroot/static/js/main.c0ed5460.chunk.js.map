{"version":3,"sources":["app/api/agent.ts","app/common/util/util.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/profileStore.ts","app/stores/rootStore.ts","features/nav/NavBar.tsx","app/common/form/TextInput.tsx","app/common/form/ErrorMessage.tsx","features/user/SocialLogin.tsx","features/user/LoginForm.tsx","features/user/RegisterForm.tsx","features/home/HomePage.tsx","features/profiles/ProfileHeader.tsx","app/common/photoUpload/PhotoWidgetDropzone.tsx","app/common/photoUpload/PhotoWidgetCropper.tsx","app/common/photoUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","app/common/form/TextAreaInput.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileDescription.tsx","features/profiles/ProfileCard.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContents.tsx","app/layout/LoadingComponent.tsx","features/profiles/ProfilePage.tsx","features/activities/dashboard/ActivityListItemAttendees.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/options/cateogoryOptions.ts","app/models/activity.ts","app/common/form/SelectInput.tsx","app/common/form/DateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailChat.tsx","features/activities/details/ActivityDetailHeader.tsx","features/activities/details/ActivityDetailInfo.tsx","features/activities/details/ActivityDetailSidebar.tsx","features/activities/details/ActivityDetails.tsx","app/layout/NotFound.tsx","app/common/modals/ModalContainer.tsx","app/layout/PrivateRoute.tsx","features/user/RegisterSuccess.tsx","features/user/VerifyEmail.tsx","app/layout/App.tsx","app/layout/ScrollToTop.tsx","reportWebVitals.ts","index.tsx"],"names":["axios","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","undefined","message","toast","status","data","history","push","includes","removeItem","info","method","errors","hasOwnProperty","responseBody","requests","url","get","then","body","post","put","delete","file","formData","FormData","append","list","params","details","id","create","activity","update","attend","unattend","current","login","user","register","fbLogin","accessToken","refreshToken","verifyEmail","email","resendVerifyEmailConfirm","username","uploadPhoto","photo","setMainPhoto","deletePhoto","editProfile","profile","follow","unfollow","listFollowings","predicate","listActivities","setActivityProps","date","Date","isGoing","attendees","some","a","isHost","createAttendee","displayName","image","ActivityStore","observable","ref","rootStore","getActivity","activityRegistry","this","reaction","keys","page","clear","loadActivities","URLSearchParams","String","forEach","value","key","toISOString","Math","ceil","activityCount","groupActivitiesByDate","Array","from","values","activities","sortedActivities","sort","b","getTime","Object","entries","reduce","split","Map","action","set","computed","activityId","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","commonStore","configureLogging","LogLevel","Information","build","start","console","log","state","invoke","catch","on","comment","runInAction","comments","stop","loadingInitial","agent","axiosParams","activitiesEnvelope","userStore","toJS","submitting","attendee","event","target","currentTarget","name","loading","filter","UserStore","refreshTokenTimeout","jwtToken","JSON","parse","atob","timeout","exp","now","setTimeout","clearTimeout","setToken","startRefreshTokenTimer","modalStore","closeModal","stopRefreshTokenTimer","CommonStore","setItem","appLoaded","ModalStore","shallow","open","content","modal","ProfileStore","activeTab","loadFollowings","followings","activeIndex","loadingActivities","userActivities","loadingProfile","uploadingPhoto","photos","isMain","find","following","followersCount","profiles","configure","enforceActions","RootStoreContext","createContext","activityStore","profileStore","observer","useContext","logout","Menu","fixed","inverted","Container","Item","header","as","NavLink","exact","to","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","TextInput","input","width","type","placeholder","meta","touched","Form","Field","Label","basic","color","ErrorMessage","Message","Header","statusText","length","List","flat","map","err","i","Content","fbCallback","appId","fields","callback","render","renderProps","fluid","Icon","validate","combineValidators","isRequired","password","onSubmit","FORM_ERROR","handleSubmit","submitError","invalid","pristine","dirtySinceLastSubmit","autoComplete","textAlign","component","disabled","Divider","horizontal","RegisterForm","HomePage","isLoggedIn","openModal","Segment","vertical","className","size","marginBottom","isCurrentUser","Grid","Column","Group","verticalAlign","Statistic","widths","label","followingCount","Reveal","animated","visible","hidden","dropzoneStyles","border","borderColor","borderRadius","paddingTop","height","dropzoneActive","PhotoWidgetDropzone","setFiles","onDrop","useCallback","acceptedFiles","assign","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","setImage","imagePreview","cropper","useRef","aspectRatio","guides","viewMode","dragMode","scalable","cropBoxMovable","cropBoxResizable","crop","getCroppedCanvas","toBlob","blob","useState","files","useEffect","revokeObjectURL","sub","minHeight","overflow","addPhotoMode","setAddPhotoMode","setTarget","deleteTarget","setDeleteTarget","Tab","Pane","paddingBottom","floated","Card","itemsPerRow","negative","TextAreaInput","rows","initialValues","bio","ProfileDescription","editMode","setEditMode","ProfileCard","extra","ProfileFollowings","panes","menuItem","pane","loadUserActivities","menu","secondary","onTabChange","e","handleTabChange","category","objectFit","title","Meta","format","ProfileContents","setActiveTab","menuPosition","LoadingComponent","Dimmer","active","Loader","match","loadProfile","styles","borderWidth","ActivityListItemAttendees","Popup","trigger","circular","bordered","ActivityListItem","host","x","Description","venue","city","clearing","description","activitiesByDate","group","divided","setPredicate","marginTop","attached","has","onChange","ActivityListItemPlaceholder","Placeholder","Line","Paragraph","loadingNext","setLoadingNext","setPage","totalPages","pageStart","loadMore","hasMore","initialLoad","ActivityFormValues","init","time","SelectInput","options","Select","DateInput","rest","onBlur","onKeyDown","preventDefault","composeValidators","hasLengthGreaterThan","createActivity","editActivity","loadActivity","setActivity","setLoading","finally","dateAndTime","dateString","timeString","combineDateAndTime","newActivity","uuid","createHubConnection","stopHubConnection","addComment","Comment","Avatar","Author","Metadata","formatDistance","createdAt","Text","form","reset","labelPosition","primary","activityImageStyle","activityImageTextStyle","bottom","left","attendActivity","cancelAttendance","padding","relaxed","ribbon","Extra","NotFound","Inline","Modal","onClose","PrivateRoute","Component","props","RegisterSuccess","location","queryString","search","success","VerifyEmail","Status","setStatus","handleConfirmEmailResend","getBody","withRouter","setAppLoaded","getUser","path","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ScrollToTop","pathname","useLocation","scrollTo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","dateFnsLocalizer","createBrowserHistory","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c0ed5460.chunk.js","sourcesContent":["// this file will host all of the api calls\nimport axios, { AxiosResponse } from \"axios\";\nimport { IActivitiesEnvelope, IActivity } from \"../models/activity\";\nimport { toast } from \"react-toastify\";\nimport { history } from \"../..\"; // '../../' is leading to the index file\nimport { IUser, IUserFormValues } from \"../models/user\";\nimport { IPhoto, IProfile } from \"../models/profile\";\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(\n  (config) => {\n    const token = window.localStorage.getItem(\"jwt\"); // check to see if we have a token\n    if (token) config.headers.Authorization = `Bearer ${token}`; // attach token to autorization header and come out as Bearer token\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\naxios.interceptors.response.use(undefined, error => {\n  if (error.message === \"Network Error\" && !error.response) {\n    toast.error(\"Network Error - Make Sure API is running.\");\n  }\n  const { status, data, config, headers } = error.response;\n  if (status === 404) {\n    history.push(\"/not-found\");\n  }\n  if (status === 401 && headers['www-authenticate'].includes('The token expired')) {\n    window.localStorage.removeItem(\"jwt\");\n    history.push(\"/\");\n    toast.info(\"Your session has expired. Please login again.\");\n  }\n  if (\n    status === 400 &&\n    config.method === \"get\" &&\n    data.errors.hasOwnProperty(\"id\")\n  ) {\n    history.push(\"/not-found\");\n  }\n  if (status === 500) {\n    toast.error(\"Server Error - Check the Terminal for More Information!\");\n  }\n  throw error.response;\n});\n\nconst responseBody = (response: AxiosResponse) =>\n  response ? response.data : [];\n\nconst requests = {\n  get: (url: string) => axios.get(url)\n  .then(responseBody),\n  post: (url: string, body: {}) =>\n    axios.post(url, body)\n    .then(responseBody),\n  put: (url: string, body: {}) =>\n    axios.put(url, body)\n    .then(responseBody),\n  delete: (url: string) =>\n    axios.delete(url)\n    .then(responseBody),\n  postForm: (url: string, file: Blob) => {\n    let formData = new FormData();\n    formData.append(\"File\", file); // File is the key. Which needs to match the call of the property in IForm File\n    return axios\n      .post(url, formData, {\n        headers: { \"Content-type\": \"multipart/form-data\" },\n      })\n      .then(responseBody);\n  },\n};\n\nconst Activities = {\n  list: (params: URLSearchParams): Promise<IActivitiesEnvelope> =>\n    axios\n      .get(\"/activities\", { params: params })\n      .then(responseBody),\n  details: (id: string) => requests.get(`/activities/${id}`),\n  create: (activity: IActivity) => requests.post(\"/activities\", activity),\n  update: (activity: IActivity) =>\n    requests.put(`/activities/${activity.id}`, activity),\n  delete: (id: string) => requests.delete(`/activities/${id}`),\n  attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\n  unattend: (id: string) => requests.delete(`/activities/${id}/attend`),\n};\n\nconst User = {\n  current: (): Promise<IUser> => requests.get(\"/user\"),\n  login: (user: IUserFormValues): Promise<IUser> =>\n    requests.post(`/user/login/`, user),\n  register: (user: IUserFormValues): Promise<IUser> =>\n    requests.post(`/user/register/`, user),\n  fbLogin: (accessToken: string) =>\n    requests.post(`/user/facebook`, {accessToken}),\n  refreshToken: (): Promise<IUser> => requests.post(`/user/refershToken`, {}),\n  verifyEmail: (token: string, email: string): Promise<void> => \n    requests.post(`/user/verifyEmail`, {token, email}),\n  resendVerifyEmailConfirm: (email: string): Promise<void> =>\n    requests.get(`/user/resendEmailVerification?email=${email}`)\n};\n\nconst Profiles = {\n  get: (username: string): Promise<IProfile> =>\n    requests.get(`/profiles/${username}`),\n  uploadPhoto: (photo: Blob): Promise<IPhoto> =>\n    requests.postForm(\"/photos\", photo),\n  setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n  deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\n  editProfile: (profile: Partial<IProfile>) =>\n    requests.put(`/profiles`, profile),\n  follow: (username: string) =>\n    requests.post(`/profiles/${username}/follow`, {}),\n  unfollow: (username: string) =>\n    requests.delete(`/profiles/${username}/follow`),\n  listFollowings: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/follow?predicate=${predicate}`),\n  listActivities: (username: string, predicate: string) =>\n    requests.get(`/profiles/${username}/activities?predicate=${predicate}`),\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n  Activities,\n  User,\n  Profiles,\n};\n","// General purpose for helper methods\n\nimport { IActivity, IAttendee } from \"../../models/activity\";\nimport { IUser } from \"../../models/user\";\n\nexport const combineDateAndTime = (date: Date, time: Date) => {\n  // const timeString = time.getHours() + \":\" + time.getMinutes() + \":00\";\n\n  // const year = date.getFullYear();\n  // const month = date.getMonth() + 1;\n  // const day = date.getDate();\n  // Get Date will give us the date, getDay will get us the day whereas we don't want that.\n  // const dateString = `${year}-${month}-${day}`;\n\n  const dateString = date.toISOString().split('T')[0];\n  const timeString = time.toISOString().split('T')[1];\n  return new Date(dateString + \" \" + timeString);\n};\n\nexport const setActivityProps = (activity: IActivity, user: IUser) => {\n  // When loading a date it will always use a javascript date object\n  activity.date = new Date(activity.date);\n  activity.isGoing = activity.attendees.some(\n    (a) => a.username === user.username\n  );\n  activity.isHost = activity.attendees.some(\n    (a) => a.username === user.username && a.isHost\n  );\n  return activity;\n};\n\nexport const createAttendee = (user: IUser): IAttendee => {\n  return {\n    displayName: user.displayName,\n    isHost: false,\n    username: user.username,\n    image: user.image!\n  }\n}\n","// Store that loads our activities\nimport { action, observable, computed, runInAction, reaction, toJS } from \"mobx\";\nimport { SyntheticEvent } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { createAttendee, setActivityProps } from \"../common/util/util\";\nimport { IActivity } from \"../models/activity\";\nimport { RootStore } from \"./rootStore\";\nimport {\n  HubConnection,\n  HubConnectionBuilder,\n  LogLevel,\n} from \"@microsoft/signalr\";\n\nconst LIMIT = 2; // does not have to be two\n\nexport default class ActivityStore {\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction(\n      () => this.predicate.keys(),\n      () => {\n        this.page = 0;\n        this.activityRegistry.clear();\n        this.loadActivities();\n      }\n    )\n  };\n\n  @observable activityRegistry = new Map();\n  @observable activity: IActivity | null = null;\n  @observable loadingInitial = false;\n  @observable submitting = false;\n  @observable target = \"\";\n  @observable loading = false;\n  @observable.ref hubConnection: HubConnection | null = null; // only observes a reference to the hub connection\n  @observable activityCount = 0;\n  @observable page = 0;\n  @observable predicate = new Map(); // new Map because we want our query string paramerters to be key value pairs\n\n  @action setPredicate = (predicate: string, value: string | Date) => {\n    this.predicate.clear();\n    if (predicate !== 'all') {\n      this.predicate.set(predicate, value);\n    };\n  };\n\n  @computed get axiosParams() {\n    const params = new URLSearchParams(); // URL SEARCH PARAMS is an interface that defines methods to work with query strings of a certain URL\n    params.append('limit', String(LIMIT));\n    params.append('offset', `${this.page ? this.page * LIMIT  : 0}`);\n    this.predicate.forEach((value, key) => {\n      if (key === 'startDate') {\n        params.append(key, value.toISOString());\n      } else {\n        params.append(key, value)\n      }\n    });\n    return params;\n  }\n  \n  @computed get totalPages() {\n    return Math.ceil(this.activityCount / LIMIT);\n  };\n\n  @action setPage = (page: number) => {\n    this.page = page;\n  };\n\n  @action createHubConnection = (activityId: string) => {\n    this.hubConnection = new HubConnectionBuilder()\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\n        accessTokenFactory: () => this.rootStore.commonStore.token!,\n      })\n      .configureLogging(LogLevel.Information)\n      .build();\n\n      this.hubConnection\n      .start()\n      .then(() => console.log(\"Hub Connection State\", this.hubConnection!.state))\n      .then(() => {\n        // Use an If Statement to work around the \"Cannot send data if the connection is not in the Connected state\" error\n        if (this.hubConnection!.state === 'Connected') {\n          this.hubConnection!.invoke('AddToGroup', activityId)\n        }\n      })\n      .catch(error => console.log('Error establishing connection: ', error));\n\n      // when we receive a comment\n      this.hubConnection.on('ReceiveComment', comment => {\n        runInAction(() => {\n          this.activity!.comments.push(comment);\n        });\n      })\n\n      this.hubConnection.on('Send', message => {\n        toast.info(message);\n      })\n  };\n\n  @action stopHubConnection = () => {\n    this.hubConnection!.invoke('RemoveFromGroup', this.activity!.id)\n      .then(() => {\n        this.hubConnection!.stop(); // allows us to turn off the hubConnection of the user\n      })\n      .then(() => console.log('Connection has stopped.'))\n      .catch(error => console.log('error', error))\n  };\n\n  @action addComment = async (values: any) => {\n    values.activityId = this.activity!.id; // values.activityId needs to match the Create comment class\n    try {\n      await this.hubConnection!.invoke(\"SendComment\", values); // SendComment needs to match the SendComment method in the ChatHub class\n    } catch (error) {\n      console.log('error', error);\n    };\n  };\n\n  //computed when the data is already in the store, and work out the result for the existing data\n  @computed get activitiesByDate() {\n    return this.groupActivitiesByDate(\n      Array.from(this.activityRegistry.values())\n    );\n  }\n\n  // Hope will be each unique date has an array to be able to group each event\n  groupActivitiesByDate(activities: IActivity[]) {\n    const sortedActivities = activities.sort(\n      (a, b) => a.date.getTime() - b.date.getTime()\n    );\n    return Object.entries(\n      sortedActivities.reduce((activities, activity) => {\n        const date = activity.date.toISOString().split(\"T\")[0];\n        activities[date] = activities[date]\n          ? [...activities[date], activity]\n          : [activity];\n        return activities;\n      }, {} as { [key: string]: IActivity[] })\n    );\n  }\n\n  @action loadActivities = async () => {\n    this.loadingInitial = true; // Starts the loading indicator\n    try {\n      const activitiesEnvelope = await agent.Activities.list(this.axiosParams);\n      const {activities, activityCount} = activitiesEnvelope;\n      runInAction(() => {\n        activities.forEach((activity) => {\n          setActivityProps(activity, this.rootStore.userStore.user!);\n          this.activityRegistry.set(activity.id, activity); // to match with the observable activities\n        });\n        this.activityCount = activityCount\n        this.loadingInitial = false;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loadingInitial = false;\n      });\n      console.log(\"error\", error);\n    }\n  };\n\n  @action loadActivity = async (id: string) => {\n    // SCENARIOS TO ACCOUNT FOR\n    // A user clicks on the view button on the activity list\n    // A user clicks on the view button, but goes to refresh the page to access the page directly\n    let activity = this.getActivity(id);\n    if (activity) {\n      this.activity = activity;\n      return toJS(activity); // a deep clone to not send back an observable to the ActivityForm, which would cause an error or rerender\n    } else {\n      this.loadingInitial = true;\n      try {\n        activity = await agent.Activities.details(id);\n        runInAction(() => {\n          setActivityProps(activity, this.rootStore.userStore.user!);\n          this.activity = activity;\n          this.activityRegistry.set(activity.id, activity); // to match with the observable activities\n          this.loadingInitial = false;\n        });\n        return activity;\n      } catch (error) {\n        runInAction(() => {\n          this.loadingInitial = false;\n        });\n        console.log(\"error\", error);\n      }\n    }\n  };\n\n  @action clearActivity = () => {\n    this.activity = null;\n  };\n\n  getActivity = (id: string) => {\n    return this.activityRegistry.get(id);\n  };\n\n  @action createActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.create(activity);\n      // This makes sure the created user of the activity will be the host\n      const attendee = createAttendee(this.rootStore.userStore.user!);\n      attendee.isHost = true;\n      let attendees = [];\n      attendees.push(attendee);\n      activity.attendees = attendees;\n      activity.comments = []; // in order to create a new activity, then also add comments\n      activity.isHost = true; // sets the flag for immediate submit\n      runInAction(() => {\n        this.activityRegistry.set(activity.id, activity); // to match with the observable activities\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction(() => {\n        this.submitting = false;\n      });\n      toast.error(\"Problem Submitting Data\");\n      console.log(\"error\", error.response);\n    }\n  };\n\n  @action editActivity = async (activity: IActivity) => {\n    this.submitting = true;\n    try {\n      await agent.Activities.update(activity);\n      runInAction(() => {\n        this.activityRegistry.set(activity.id, activity);\n        this.activity = activity;\n        this.submitting = false;\n      });\n      history.push(`/activities/${activity.id}`);\n    } catch (error) {\n      runInAction(() => {\n        this.submitting = false;\n      });\n      console.log(\"error\", error);\n    }\n  };\n\n  @action deleteActivity = async (\n    event: SyntheticEvent<HTMLButtonElement>,\n    id: string\n  ) => {\n    this.submitting = true;\n    this.target = event.currentTarget.name;\n    try {\n      await agent.Activities.delete(id);\n      runInAction(() => {\n        this.activityRegistry.delete(id);\n        this.submitting = false;\n        this.target = \"\";\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.submitting = false;\n        this.target = \"\";\n      });\n      console.log(\"error\", error);\n    }\n  };\n\n  @action attendActivity = async () => {\n    const attendee = createAttendee(this.rootStore.userStore.user!);\n    this.loading = true;\n    try {\n      await agent.Activities.attend(this.activity!.id);\n      runInAction(() => {\n        if (this.activity) {\n          this.activity.attendees.push(attendee);\n          this.activity.isGoing = true;\n          this.activityRegistry.set(this.activity.id, this.activity);\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error(\"Problem Signing up to Activity\");\n    }\n  };\n\n  @action cancelAttendance = async () => {\n    this.loading = true;\n    try {\n      await agent.Activities.unattend(this.activity!.id);\n      runInAction(() => {\n        if (this.activity) {\n          this.activity.attendees = this.activity.attendees.filter(\n            (a) => a.username !== this.rootStore.userStore.user!.username\n          );\n          this.activity.isGoing = false;\n          this.activityRegistry.set(this.activity.id, this.activity);\n          this.loading = false;\n        }\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      toast.error(\"Problem Cancelling Attendance\");\n    }\n  };\n}\n","import { action, computed, observable, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { IUser, IUserFormValues } from \"../models/user\";\nimport { RootStore } from \"./rootStore\";\nimport { history } from '../..';\n\nexport default class UserStore {\n  refreshTokenTimeout: any;\n  rootStore: RootStore;\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore;\n  };\n\n  @observable user: IUser | null = null;\n  @observable loading = false;\n\n  @computed get isLoggedIn() {return !!this.user};\n\n  @action login = async (values: IUserFormValues) => {\n    try {\n      const user = await agent.User.login(values);\n      runInAction(() => {\n        this.user = user; // assigns user login to user observable\n      });\n      this.rootStore.commonStore.setToken(user.token);\n      this.startRefreshTokenTimer(user);\n      this.rootStore.modalStore.closeModal();\n      history.push('/activities');\n    } catch (error) {\n      throw error;\n    };\n  };\n\n  @action register = async (values: IUserFormValues) => {\n    try {\n      await agent.User.register(values);\n      this.rootStore.modalStore.closeModal();\n      history.push(`/user/registerSuccess?email=${values.email}`);\n    } catch (error) {\n      throw error;\n    };\n  };\n\n  @action refreshToken = async () => {\n    this.stopRefreshTokenTimer();\n    try {\n      const user = await agent.User.refreshToken();\n      runInAction(() => {\n        this.user = user;\n      });\n      this.rootStore.commonStore.setToken(user.token);\n      this.startRefreshTokenTimer(user);\n    } catch(error) {\n      console.log('error', error)\n    }\n  };\n\n  @action getUser = async () => {\n    try {\n      const user = await agent.User.current();\n      runInAction(() => {\n        this.user = user; // the user from the api\n      });\n      this.rootStore.commonStore.setToken(user.token);\n      this.startRefreshTokenTimer(user);\n    } catch (error) {\n      console.log('error', error);\n    };\n  };\n\n  @action logout = () => {\n    this.rootStore.commonStore.setToken(null);\n    this.user = null;\n    history.push('/');\n  };\n\n  @action fbLogin = async (response: any) => {\n    this.loading = true;\n    try {\n      const user = await agent.User.fbLogin(response.accessToken);\n      runInAction(() => {\n        this.user = user;\n        this.rootStore.commonStore.setToken(user.token);\n        this.startRefreshTokenTimer(user);\n        this.rootStore.modalStore.closeModal();\n        this.loading = false;\n      });\n      history.push('/activities');\n    } catch (error) {\n      runInAction(() => {\n        this.loading = false;\n      });\n      throw error;\n    }\n  };\n\n  private startRefreshTokenTimer(user: IUser) {\n    const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\n    const expires = new Date(jwtToken.exp * 1000); \n    const timeout = expires.getTime() - Date.now() - (60 * 1000);\n    this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\n  };\n\n  private stopRefreshTokenTimer() {\n    clearTimeout(this.refreshTokenTimeout);\n  };\n};\n\n","import { observable, action, reaction } from 'mobx';\nimport { RootStore } from './rootStore';\n\nexport default class CommonStore {\n  rootStore: RootStore;\n  constructor (rootStore: RootStore) {\n    this.rootStore = rootStore;\n\n    reaction (\n      () => this.token,\n      token => {\n        if (token) {\n          window.localStorage.setItem('jwt', token);\n        } else {\n          window.localStorage.removeItem('jwt')\n        }\n      }\n    )\n  };\n\n  @observable token: string | null = window.localStorage.getItem('jwt'); // Should find the token and immediately log us in\n  @observable appLoaded = false;\n\n  @action setToken = (token: string | null) => {\n    this.token = token;\n  };\n\n  @action setAppLoaded = () => {\n    this.appLoaded = true;\n  };\n}","// This Store will handle our modal store functionality\nimport { action, observable } from \"mobx\";\nimport { RootStore } from \"./rootStore\";\n\nexport default class ModalStore {\n  rootStore: RootStore;\n  constructor (rootStore: RootStore) {\n    this.rootStore = rootStore;\n  };\n\n  // Shallow only observes the first level, in the case of a null section which would want to see deeply\n  @observable.shallow modal = {\n    open: false,\n    body: null\n  };\n\n  @action openModal = (content: any) => {\n    this.modal.open = true;\n    this.modal.body = content;\n  };\n\n  @action closeModal = () => {\n    this.modal.open = false;\n    this.modal.body = null;\n  };\n}","import { action, observable, runInAction, computed, reaction } from \"mobx\";\nimport { toast } from \"react-toastify\";\nimport agent from \"../api/agent\";\nimport { IPhoto, IProfile, IUserActivity } from \"../models/profile\";\nimport { RootStore } from \"./rootStore\";\n\nexport default class ProfileStore {\n  rootStore: RootStore\n\n  constructor(rootStore: RootStore) {\n    this.rootStore = rootStore\n\n    reaction ( \n      () => this.activeTab,\n      activeTab => {\n        if (activeTab === 3 || activeTab === 4) {\n          const predicate = activeTab === 3 ? 'followers' : 'following';\n          this.loadFollowings(predicate);\n        } else {\n          this.followings = [];\n        }\n      }\n    )\n  }\n\n  @observable profile: IProfile | null = null;\n  @observable loadingProfile = true;\n  @observable uploadingPhoto = false;\n  @observable loading = false;\n  @observable followings: IProfile[] = [];\n  @observable activeTab: number = 0;\n  @observable userActivities: IUserActivity[] = [];\n  @observable loadingActivities = false;\n\n  @computed get isCurrentUser() {\n    if (this.rootStore.userStore.user && this.profile) {\n      return this.rootStore.userStore.user.username === this.profile.username;\n    } else {\n      return false;\n    };\n  };\n\n  @action setActiveTab = (activeIndex: number) => {\n    this.activeTab = activeIndex; \n  };\n\n  @action loadUserActivities = async (username: string, predicate?: string) => {\n    this.loadingActivities = true;\n    try {\n      const activities = await agent.Profiles.listActivities(username, predicate!);\n      runInAction(() => {\n        this.userActivities = activities;\n        this.loadingActivities = false;\n      })\n    } catch (error) {\n      toast.error('Problem Loading Activities');\n      runInAction(() => {\n        this.loadingActivities = false;\n      })\n    }\n  };\n\n  @action loadProfile = async (username: string) => {\n    try {\n      const profile = await agent.Profiles.get(username);\n      runInAction(() => {\n        this.profile = profile;\n        this.loadingProfile = false;\n      });\n    } catch (error) {\n      runInAction(() => {\n        this.loadingProfile = false;\n      })\n      console.log('error', error)\n    };\n  };\n\n  @action editProfile = async (profile: Partial<IProfile>) => {\n    try {\n      await agent.Profiles.editProfile(profile); // method to call up to the API\n      runInAction(() => {\n        // checking if the display name has been updated by comparing it with the user store display name\n        // if updated, we want to update the display name in here\n        if (profile.displayName !== this.rootStore.userStore.user!.displayName) {\n          this.rootStore.userStore.user!.displayName = profile.displayName!;\n        }\n        this.profile = {...this.profile!, ...profile}; \n        // updating the properties in the profile observable\n        // the spread operator here spreads all properties in the profile object, \n        // and then overwrite them with the properties contained in the profile properties here\n      });\n    } catch (error) {\n      console.log('error', error);\n      toast.error('Problem updating Profile');\n    }\n  }\n\n  @action uploadPhoto = async (file: Blob) => {\n    this.uploadingPhoto = true;\n    try {\n      const photo = await agent.Profiles.uploadPhoto(file);\n      runInAction(() => {\n        if (this.profile) {\n          this.profile.photos.push(photo);\n          if (photo.isMain && this.rootStore.userStore.user) {\n            this.rootStore.userStore.user.image = photo.url;\n            this.profile.image = photo.url;\n          };\n        };\n        this.uploadingPhoto = false;\n      });\n    } catch (error) {\n      console.log('error', error);\n      toast.error('Problem uploading photo');\n      runInAction(() => {\n        this.uploadingPhoto = false;\n      });\n    };\n  };\n\n  @action setMainPhoto = async (photo: IPhoto) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.setMainPhoto(photo.id);\n      runInAction(() => {\n        this.rootStore.userStore.user!.image = photo.url;\n        this.profile!.photos.find(a => a.isMain)!.isMain = false; // get the main photo and set it to false\n        this.profile!.photos.find(a => a.id === photo.id)!.isMain = true;\n        this.profile!.image = photo.url; // set the profile image\n        this.loading = false;\n      });\n    } catch (error) {\n      console.log('error', error);\n      toast.error('Problem setting main photo');\n      runInAction(() => {\n        this.loading = false;\n      });\n    };\n  };\n\n  @action deletePhoto = async (photo: IPhoto) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.deletePhoto(photo.id);\n      runInAction(() => {\n        this.profile!.photos = this.profile!.photos.filter(a => a.id !== photo.id);\n        this.loading = false;\n      });\n    } catch (error) {\n      console.log('error', error);\n      toast.error(\"Problem deleting this photo\")\n      runInAction(() => {\n        this.loading = false;\n      })\n    }\n  }\n\n  @action follow = async (username: string) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.follow(username);\n      runInAction(() => {\n        this.profile!.following = true;\n        this.profile!.followersCount++;\n        this.loading = false;\n      })\n    } catch (error) {\n      toast.error('Problem following user');\n      runInAction(() => {\n        this.loading = false;\n      })\n    };\n  };\n\n  @action unfollow = async (username: string) => {\n    this.loading = true;\n    try {\n      await agent.Profiles.unfollow(username);\n      runInAction(() => {\n        this.profile!.following = false;\n        this.profile!.followersCount--;\n        this.loading = false;\n      })\n    } catch (error) {\n      toast.error('Problem unfollowing user');\n      runInAction(() => {\n        this.loading = false;\n      })\n    };\n  };\n\n  @action loadFollowings = async (predicate: string) => {\n    this.loading = true;\n    try {\n      const profiles = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n      runInAction(() => {\n        this.followings = profiles;\n        this.loading = false;\n      })\n    } catch (error) {\n      toast.error('Problem loading followings');\n      runInAction(() => {\n        this.loading = false;\n      })\n    }\n  };\n\n};","import { configure } from \"mobx\";\nimport { createContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport UserStore from \"./userStore\";\nimport CommonStore from './commonStore';\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\n\n// this enables strict mode\nconfigure({enforceActions: 'always'});\n\nexport class RootStore {\n  activityStore: ActivityStore;\n  userStore: UserStore;\n  commonStore: CommonStore;\n  modalStore: ModalStore;\n  profileStore: ProfileStore;\n\n  constructor() {\n    this.activityStore = new ActivityStore(this);\n    this.userStore = new UserStore(this);\n    this.commonStore = new CommonStore(this);\n    this.modalStore = new ModalStore(this);\n    this.profileStore = new ProfileStore(this);\n  };\n};\n\nexport const RootStoreContext = createContext(new RootStore());","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { Button, Container, Dropdown, Menu, Image } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\n\nconst NavBar: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { user, logout } = rootStore.userStore;\n\n  return (\n    <Menu fixed=\"top\" inverted>\n      <Container>\n        <Menu.Item header as={NavLink} exact to=\"/\">\n          <img\n            src=\"/assets/logo.png\"\n            alt=\"logo\"\n            style={{ marginRight: \"1rem\" }}\n          />\n          Reactivities\n        </Menu.Item>\n        <Menu.Item name=\"activities\" as={NavLink} to=\"/activities\" />\n        <Menu.Item>\n          <Button\n            as={NavLink}\n            to=\"/createActivity\"\n            positive\n            content=\"Create Activity\"\n          />\n        </Menu.Item>\n        {user && (\n          <Menu.Item position=\"right\">\n            <Image avatar spaced=\"right\" src={user.image || \"/assets/user.png\"} />\n            <Dropdown pointing=\"top left\" text={user.displayName}>\n              <Dropdown.Menu>\n                <Dropdown.Item\n                  as={Link}\n                  to={`/profile/${user.username}`}\n                  text=\"My Profile\"\n                  icon=\"user\"\n                />\n                <Dropdown.Item onClick={logout} text=\"Logout\" icon=\"power\" />\n              </Dropdown.Menu>\n            </Dropdown>\n          </Menu.Item>\n        )}\n      </Container>\n    </Menu>\n  );\n};\n\nexport default observer(NavBar);\n","import React from 'react';\nimport { FieldRenderProps } from \"react-final-form\";\nimport { Form, FormFieldProps, Label } from \"semantic-ui-react\";\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLElement>,\n    FormFieldProps {}\n\nconst TextInput: React.FC<IProps> = ({\n  input,\n  width,\n  type,\n  placeholder,\n  meta: { touched, error },\n}) => {\n\n  return (\n  <Form.Field error={touched && !!error} type={type} width={width}>\n    <input {...input} placeholder={placeholder} />\n    {touched && error && (\n      <Label basic color='red'>\n        {error}\n      </Label>\n    )}\n  </Form.Field>\n  );\n};\n\nexport default TextInput;\n","import React from 'react';\nimport { AxiosResponse } from \"axios\";\nimport { Message } from \"semantic-ui-react\";\n\ninterface IProps {\n  error: AxiosResponse;\n  text?: string;\n}\n\nconst ErrorMessage: React.FC<IProps> = ({ error, text }) => {\n  return (\n    <Message error>\n      <Message.Header>{error.statusText}</Message.Header>\n      {error.data && Object.keys(error.data.errors).length > 0 && (\n        <Message.List>\n          {/* Index will act as the key */}\n          {Object.values(error.data.errors).flat().map((err: any, i) => (\n            <Message.Item key={i}>{err}</Message.Item>\n          ))}\n        </Message.List> \n        // This will show the errors in a list instead of a strinigify way\n      )}\n      {text && <Message.Content content={text} />}\n    </Message>\n  );\n};\n\nexport default ErrorMessage;\n","import { observer } from 'mobx-react-lite';\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props';\nimport { Button, Icon } from 'semantic-ui-react';\n\n\ninterface IProps {\n  fbCallback: (response: any) => void;\n  loading: boolean;\n};\n\nconst SocialLogin: React.FC<IProps> = ({fbCallback, loading}) => {\n  return (\n    <div>\n      <FacebookLogin \n        appId=\"754926351797383\"\n        fields=\"name,email,picture\"\n        callback={fbCallback}\n        render={(renderProps: any) => (\n          <Button loading={loading} onClick={renderProps.onClick} type='button' fluid color='facebook'>\n            <Icon name=\"facebook\"/>\n            Login with Facebook\n          </Button>\n        )}\n      />\n    </div>\n  )\n}\n\nexport default observer(SocialLogin)\n","import React, { useContext } from \"react\";\nimport { FORM_ERROR } from \"final-form\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { Button, Divider, Form, Header } from \"semantic-ui-react\";\nimport TextInput from \"../../app/common/form/TextInput\";\nimport { IUserFormValues } from \"../../app/models/user\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { combineValidators, isRequired } from \"revalidate\";\nimport ErrorMessage from \"../../app/common/form/ErrorMessage\";\nimport SocialLogin from \"./SocialLogin\";\nimport { observer } from 'mobx-react-lite';\n\nconst validate = combineValidators({\n  email: isRequired(\"Email\"),\n  password: isRequired(\"Password\")\n});\n\nconst LoginForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { login, fbLogin, loading } = rootStore.userStore;\n\n  return (\n    <FinalForm\n      onSubmit={(values: IUserFormValues) =>\n        login(values).catch(error => ({\n          [FORM_ERROR]: error, // The error will be stored with the help of Axios\n        }))\n      }\n      validate={validate}\n      render={({\n        handleSubmit,\n        submitting,\n        submitError,\n        invalid,\n        pristine,\n        dirtySinceLastSubmit\n      }) => (\n        <Form onSubmit={handleSubmit} error autoComplete=\"off\">\n          <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center'/>\n          <Field name=\"email\" component={TextInput} placeholder=\"Email\" />\n          <Field\n            name=\"password\"\n            component={TextInput}\n            placeholder=\"Password\"\n            type=\"password\"\n          />\n          {submitError && !dirtySinceLastSubmit && (\n            <ErrorMessage error={submitError} text='Invalid Email or Password' />\n          )}\n          <Button\n            // eslint-disable-next-line no-mixed-operators\n            disabled={invalid && !dirtySinceLastSubmit || pristine}\n            loading={submitting}\n            color='teal'\n            content=\"Login\"\n            fluid\n          />\n          <Divider horizontal> Or </Divider>\n          <SocialLogin loading={loading} fbCallback={fbLogin} />\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default observer(LoginForm);\n","import React, { useContext } from \"react\";\nimport { FORM_ERROR } from \"final-form\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { Button, Form, Header } from \"semantic-ui-react\";\nimport TextInput from \"../../app/common/form/TextInput\";\nimport { IUserFormValues } from \"../../app/models/user\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { combineValidators, isRequired } from \"revalidate\";\nimport ErrorMessage from \"../../app/common/form/ErrorMessage\";\n\nconst validate = combineValidators({\n  username: isRequired(\"username\"),\n  displayName: isRequired(\"display name\"),\n  email: isRequired(\"Email\"),\n  password: isRequired(\"Password\"),\n});\n\nconst RegisterForm = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { register } = rootStore.userStore;\n\n  return (\n    <FinalForm\n      onSubmit={(values: IUserFormValues) =>\n        register(values).catch((error) => ({\n          [FORM_ERROR]: error, // The error will be stored with the help of Axios\n        }))\n      }\n      validate={validate}\n      render={({\n        handleSubmit,\n        submitting,\n        submitError,\n        invalid,\n        pristine,\n        dirtySinceLastSubmit,\n      }) => (\n        <Form onSubmit={handleSubmit} error>\n          <Header\n            as=\"h2\"\n            content=\"Sign up to Reactivities\"\n            color=\"teal\"\n            textAlign=\"center\"\n          />\n          <Field name=\"username\" component={TextInput} placeholder=\"Username\" />\n          <Field\n            name=\"displayName\"\n            component={TextInput}\n            placeholder=\"Display Name\"\n          />\n          <Field name=\"email\" component={TextInput} placeholder=\"Email\" />\n          <Field\n            name=\"password\"\n            component={TextInput}\n            placeholder=\"Password\"\n            type=\"password\"\n          />\n          {submitError && !dirtySinceLastSubmit && (\n            <ErrorMessage\n              error={submitError}\n            />\n          )}\n          <Button\n            // eslint-disable-next-line no-mixed-operators\n            disabled={(invalid && !dirtySinceLastSubmit) || pristine}\n            loading={submitting}\n            color=\"teal\"\n            content=\"Register\"\n            fluid\n          />\n        </Form>\n      )}\n    />\n  );\n};\n\nexport default RegisterForm;\n","import React, { Fragment, useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Container, Header, Segment, Image } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport LoginForm from \"../user/LoginForm\";\nimport RegisterForm from \"../user/RegisterForm\";\n\nconst HomePage = () => {\n  const token = window.localStorage.getItem('jwt');\n  const rootStore = useContext(RootStoreContext);\n  const { isLoggedIn, user } = rootStore.userStore;\n  const {openModal} = rootStore.modalStore;\n\n  return (\n    <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\n      <Container text>\n        <Header as=\"h1\" inverted>\n          <Image\n            size=\"massive\"\n            src=\"/assets/logo.png\"\n            alt=\"logo\"\n            style={{ marginBottom: 12 }}\n          />\n          Reactivities\n        </Header>\n        {isLoggedIn && user && token ? (\n          <Fragment>\n            <Header\n              as=\"h2\"\n              inverted\n              content={`Welcome back ${user.displayName}`}\n            />\n            <Button as={Link} to=\"/activities\" size=\"huge\" inverted>\n              Go to Activities\n            </Button>\n          </Fragment>\n        ) : (\n          <Fragment>\n            <Header as=\"h2\" inverted content=\"Welcome to Reactivities\" />\n            <Button onClick={() => openModal(<LoginForm />)} size=\"huge\" inverted>\n              Login\n            </Button>\n          <Button onClick={() => openModal(<RegisterForm />)} size=\"huge\" inverted>\n              Register\n            </Button>\n          </Fragment>\n        )}\n      </Container>\n    </Segment>\n  );\n};\n\nexport default HomePage;\n","import { observer } from \"mobx-react-lite\";\nimport {\n  Segment,\n  Item,\n  Header,\n  Button,\n  Grid,\n  Statistic,\n  Divider,\n  Reveal,\n} from \"semantic-ui-react\";\nimport { IProfile } from \"../../app/models/profile\";\n\ninterface IProps {\n  profile: IProfile;\n  isCurrentUser: boolean;\n  loading: boolean;\n  follow: (username: string) => void;\n  unfollow: (username: string) => void;\n}\n\nconst ProfileHeader: React.FC<IProps> = ({\n  profile,\n  isCurrentUser,\n  loading,\n  follow,\n  unfollow,\n}) => {\n  return (\n    <Segment>\n      <Grid>\n        <Grid.Column width={12}>\n          <Item.Group>\n            <Item>\n              <Item.Image\n                avatar\n                size=\"small\"\n                src={profile.image || \"/assets/user.png\"}\n              />\n              <Item.Content verticalAlign=\"middle\">\n                <Header as=\"h1\">{profile.displayName}</Header>\n              </Item.Content>\n            </Item>\n          </Item.Group>\n        </Grid.Column>\n        <Grid.Column width={4}>\n          <Statistic.Group widths={2}>\n            <Statistic label=\"Followers\" value={profile.followersCount} />\n            <Statistic label=\"Following\" value={profile.followingCount} />\n          </Statistic.Group>\n          <Divider />\n          {!isCurrentUser && (\n            <Reveal animated=\"move\">\n              <Reveal.Content visible style={{ width: \"100%\" }}>\n                <Button\n                  fluid\n                  color=\"teal\"\n                  content={profile.following ? \"Following\" : \"Not Following\"}\n                />\n              </Reveal.Content>\n              <Reveal.Content hidden>\n                <Button\n                  loading={loading}\n                  fluid\n                  basic\n                  color={profile.following ? \"red\" : \"green\"}\n                  content={profile.following ? \"Unfollow\" : \"Follow\"}\n                  onClick={\n                    profile.following\n                      ? () => unfollow(profile.username)\n                      : () => follow(profile.username)\n                  }\n                />\n              </Reveal.Content>\n            </Reveal>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Segment>\n  );\n};\n\nexport default observer(ProfileHeader);\n","import { useCallback } from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { Header, Icon } from \"semantic-ui-react\";\n\ninterface IProps {\n  setFiles: (files: object[]) => void;\n}\n\nconst dropzoneStyles = {\n  border: \"dashed 3px\",\n  borderColor: \"#eee\",\n  borderRadius: \"5px\",\n  paddingTop: \"30px\",\n  textAlign: \"center\" as \"center\",\n  height: \"200px\",\n};\n\nconst dropzoneActive = {\n  borderColor: \"green\",\n};\n\nconst PhotoWidgetDropzone: React.FC<IProps> = ({ setFiles }) => {\n  const onDrop = useCallback(\n    (acceptedFiles) => {\n      setFiles(\n        acceptedFiles.map((file: object) =>\n          Object.assign(file, {\n            preview: URL.createObjectURL(file),\n          })\n        )\n      );\n    },\n    [setFiles]\n  );\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n\n  return (\n    <div\n      {...getRootProps()}\n      style = {\n        isDragActive ? { ...dropzoneStyles, ...dropzoneActive } : dropzoneStyles\n      }\n    >\n      <input {...getInputProps()} />\n      <Icon name='upload' size='huge' />\n      <Header content='Drop Image here' />\n    </div>\n  );\n};\n\nexport default PhotoWidgetDropzone;\n","import { useRef } from \"react\";\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\n\ninterface IProps {\n  setImage: (file: Blob) => void;\n  imagePreview: string;\n}\n\nconst PhotoWidgetCropper: React.FC<IProps> = ({ setImage, imagePreview }) => {\n  const cropper = useRef<Cropper>(null); // will get a reference to the cropper input element from the DOM\n\n  const cropImage = () => {\n    if (\n      cropper.current &&\n      typeof cropper.current.getCroppedCanvas() == \"undefined\"\n    ) {\n      return;\n    }\n    cropper &&\n      cropper.current &&\n      cropper.current.getCroppedCanvas().toBlob((blob: any) => {\n        setImage(blob);\n      }, \"image/jpeg\"); // type parameter\n  };\n\n  return (\n    <Cropper\n      ref={cropper}\n      src={imagePreview}\n      style={{ height: 200, width: \"100%\" }}\n      // Cropper.js options\n      aspectRatio={1 / 1} // will enforce a square image\n      preview='.img-preview'\n      guides={false}\n      viewMode={1} // confine the user to the box\n      dragMode=\"move\"\n      scalable={true}\n      cropBoxMovable={true}\n      cropBoxResizable={true}\n      crop={cropImage}\n    />\n  );\n};\n\nexport default PhotoWidgetCropper;\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { Header, Grid, Button } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\n\ninterface IProps {\n  loading: boolean;\n  uploadPhoto: (file: Blob) => void;\n}\n\nconst PhotoUploadWidget: React.FC<IProps> = ({loading, uploadPhoto}) => {\n  const [files, setFiles] = useState<any[]>([]); // any will bypass any typechecking\n  const [image, setImage] = useState<Blob | null>(null);\n\n  useEffect(() => {\n    // use effect to clean up the image preview\n    return () => {\n      files.forEach((file) => URL.revokeObjectURL(file.preview));\n    };\n  });\n\n  return (\n    <Fragment>\n      <Grid>\n        <Grid.Column width={4}>\n          <Header color=\"teal\" sub content=\"Step 1 - Add Photo\" />\n          <PhotoWidgetDropzone setFiles={setFiles} />\n        </Grid.Column>\n        <Grid.Column width={1} />\n        <Grid.Column width={4}>\n          <Header sub color=\"teal\" content=\"Step 2 - Resize image\" />\n          {files.length > 0 && <PhotoWidgetCropper setImage={setImage} imagePreview={files[0].preview}/>}\n        </Grid.Column>\n        <Grid.Column width={1} />\n        <Grid.Column width={4}>\n          <Header sub color=\"teal\" content=\"Step 3 - Preview & Upload\" />\n          {files.length > 0 && \n          <Fragment>\n            <div className='img-preview' style={{minHeight: '200px', overflow: 'hidden'}} />\n            <Button.Group widths={2}>\n              <Button positive icon='check' loading={loading} onClick={() => uploadPhoto(image!)}/>\n              <Button icon='close' disabled={loading} onClick={() => setFiles([])}/>\n            </Button.Group>\n          </Fragment>\n          }\n        </Grid.Column>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default observer(PhotoUploadWidget);\n","import { observer } from \"mobx-react-lite\";\nimport React, { useContext, useState } from \"react\";\nimport { Header, Tab, Card, Image, Button, Grid } from \"semantic-ui-react\";\nimport PhotoUploadWidget from \"../../app/common/photoUpload/PhotoUploadWidget\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\n\nconst ProfilePhotos = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    profile,\n    isCurrentUser,\n    uploadPhoto,\n    uploadingPhoto,\n    setMainPhoto,\n    deletePhoto,\n    loading,\n  } = rootStore.profileStore;\n  const [addPhotoMode, setAddPhotoMode] = useState(true);\n  const [target, setTarget] = useState<string | undefined>(undefined);\n  const [deleteTarget, setDeleteTarget] = useState<string | undefined>(\n    undefined\n  );\n\n  // This will cancel the upload widget when it is successful\n  const handleUploadImage = (photo: Blob) => {\n    uploadPhoto(photo).then(() => setAddPhotoMode(false));\n  };\n\n  return (\n    <Tab.Pane>\n      <Grid>\n        <Grid.Column width={16} style={{ paddingBottom: 0 }}>\n          <Header floated=\"left\" icon=\"image\" content=\"Photos\" />\n          {isCurrentUser && (\n            <Button\n              floated=\"right\"\n              basic\n              content={addPhotoMode ? \"Cancel\" : \"Add Photo\"}\n              onClick={() => setAddPhotoMode(!addPhotoMode)} // To have toggle functionality\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={16}>\n          {addPhotoMode ? (\n            <PhotoUploadWidget\n              uploadPhoto={handleUploadImage}\n              loading={uploadingPhoto}\n            />\n          ) : (\n            <Card.Group itemsPerRow={5}>\n              {profile &&\n                profile.photos.map((photo) => (\n                  <Card key={photo.id}>\n                    <Image src={photo.url} />\n                    {isCurrentUser && (\n                      <Button.Group fluid widths={2}>\n                        <Button\n                          name={photo.id}\n                          onClick={(event) => {\n                            setMainPhoto(photo);\n                            setTarget(event.currentTarget.name);\n                          }}\n                          disabled={photo.isMain}\n                          loading={loading && target === photo.id}\n                          basic\n                          positive\n                          content=\"Main\"\n                        />\n                        <Button\n                          basic\n                          negative\n                          icon=\"trash\"\n                          name={photo.id}\n                          disabled={photo.isMain}\n                          onClick={(event) => {\n                            deletePhoto(photo);\n                            setDeleteTarget(event.currentTarget.name)\n                          }}\n                          loading={loading && deleteTarget === photo.id}\n                        />\n                      </Button.Group>\n                    )}\n                  </Card>\n                ))}\n            </Card.Group>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfilePhotos);\n","import React from 'react';\nimport { FieldRenderProps } from \"react-final-form\";\nimport { Form, FormFieldProps, Label } from \"semantic-ui-react\";\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLElement>,\n    FormFieldProps {}\n\nconst TextAreaInput: React.FC<IProps> = ({\n  input,\n  width,\n  rows,\n  placeholder,\n  meta: { touched, error },\n}) => {\n  return (\n    <Form.Field error={touched && !!error} width={width}>\n      <textarea rows={rows} {...input} placeholder={placeholder} />\n      {touched && error && (\n        <Label basic color=\"red\">\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default TextAreaInput;","import React from 'react'\nimport { combineValidators, isRequired } from 'revalidate'\nimport { IProfile } from '../../app/models/profile';\nimport { Form as FinalForm, Field } from 'react-final-form';\nimport { observer } from 'mobx-react-lite';\nimport TextInput from '../../app/common/form/TextInput';\nimport TextAreaInput from '../../app/common/form/TextAreaInput';\nimport { Form, Button } from 'semantic-ui-react';\n\nconst validate = combineValidators({\n  displayName: isRequired('displayName')\n});\n\ninterface IProps {\n  editProfile: (profile: IProfile) => void;\n  profile: IProfile;\n};\n\nconst ProfileEditForm: React.FC<IProps> = ({editProfile, profile}) => {\n  return (\n    <FinalForm \n    onSubmit={editProfile}\n    validate={validate}\n    initialValues={profile!}\n    render={({ handleSubmit, invalid, pristine, submitting }) => (\n      <Form onSubmit={handleSubmit} error>\n        <Field \n          name='displayName'\n          component={TextInput}\n          placeholder='Display Name'\n          value={profile!.displayName}\n        />\n        <Field \n          name='bio'\n          component={TextAreaInput}\n          rows={3}\n          placeholder='Biography'\n          value={profile!.bio}\n        />\n        <Button\n          loading={submitting}\n          floated='right'\n          disabled={invalid || pristine}\n          positive\n          content='Update Profile'\n        />\n      </Form>\n    )}\n    />\n  );\n};\n\nexport default observer(ProfileEditForm)\n","import React, { useContext, useState } from 'react'\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport ProfileEditForm from './ProfileEditForm';\n\nconst ProfileDescription = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {editProfile, profile, isCurrentUser} = rootStore.profileStore;\n  const [editMode, setEditMode] = useState(false);\n\n  return (\n    <Tab.Pane>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header \n            floated='left'\n            icon='user'\n            content={`About ${profile!.username}`}\n          />\n          {isCurrentUser && (\n            <Button \n              floated='right'\n              basic\n              content={editMode ? 'Cancel' : 'Edit Profile'}\n              onClick={() => setEditMode(!editMode)}\n            />\n          )}\n        </Grid.Column>\n        <Grid.Column width={16}>\n          {editMode ? (\n            <ProfileEditForm \n              editProfile={editProfile}\n              profile={profile!}\n            />\n          ) : (\n            <span>{profile!.bio}</span>\n          )}\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default ProfileDescription;","import React from 'react';\nimport { Card, Image, Icon} from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IProfile } from '../../app/models/profile';\n\ninterface IProps {\n  profile: IProfile;\n}\n\nconst ProfileCard: React.FC<IProps> = ({profile}) => {\n  return (\n    <Card as={Link} to={`/profile/${profile.username}`}>\n      <Image src={profile.image || '/assets/user.png'} />\n      <Card.Content>\n        <Card.Header>{profile.displayName}</Card.Header>\n      </Card.Content>\n      <Card.Content extra>\n        <div>\n          <Icon name='user' />\n          {profile.followersCount} Followers\n        </div>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default ProfileCard;\n","import React, { useContext } from 'react';\nimport { Tab, Grid, Header, Card } from 'semantic-ui-react';\nimport { RootStoreContext } from '../../app/stores/rootStore';\nimport ProfileCard from './ProfileCard';\n\nconst ProfileFollowings = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { profile, followings, loading, activeTab } = rootStore.profileStore;\n\n  return (\n    <Tab.Pane loading={loading}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header\n            floated='left'\n            icon='user'\n            content={\n              activeTab === 3\n                ? `People Following ${profile!.displayName}`\n                : `People ${profile!.displayName} is Following`\n            }\n          />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Card.Group itemsPerRow={5}>\n            {followings.map((profile) => (\n              <ProfileCard key={profile.username} profile={profile}/>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default ProfileFollowings;\n","import React, { useEffect, useContext } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { IUserActivity } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { RootStoreContext } from '../../app/stores/rootStore';\n\nconst panes = [\n  { menuItem: 'Future Events', pane: { key: 'futureEvents' } },\n  { menuItem: 'Past Events', pane: { key: 'pastEvents' } },\n  { menuItem: 'Hosting', pane: { key: 'hosted' } }\n];\n\nconst ProfileActivities = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadUserActivities,\n    profile,\n    loadingActivities,\n    userActivities\n  } = rootStore.profileStore!;\n\n  useEffect(() => {\n    loadUserActivities(profile!.username);\n  }, [loadUserActivities, profile]);\n\n  const handleTabChange = (\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\n    data: TabProps\n  ) => {\n    let predicate; // predicate is based on the activeIndex clicked\n    switch (data.activeIndex) {\n      case 1:\n        predicate = 'past';\n        break;\n      case 2:\n        predicate = 'hosting';\n        break;\n      default:\n        predicate = 'future';\n        break;\n    }\n    loadUserActivities(profile!.username, predicate);\n  };\n\n  return (\n    <Tab.Pane loading={loadingActivities}>\n      <Grid>\n        <Grid.Column width={16}>\n          <Header floated='left' icon='calendar' content={'Activities'} />\n        </Grid.Column>\n        <Grid.Column width={16}>\n          <Tab\n            panes={panes}\n            menu={{ secondary: true, pointing: true }}\n            onTabChange={(e, data) => handleTabChange(e, data)}\n          />\n          <br />\n          <Card.Group itemsPerRow={4}>\n            {userActivities.map((activity: IUserActivity) => (\n              <Card\n                as={Link}\n                to={`/activities/${activity.id}`}\n                key={activity.id}\n              >\n                <Image\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\n                  style={{ minHeight: 100, objectFit: 'cover' }}\n                />\n                <Card.Content>\n                  <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                  <Card.Meta textAlign='center'>\n                    <div>{format(new Date(activity.date), 'do LLL')}</div>\n                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                  </Card.Meta>\n                </Card.Content>\n              </Card>\n            ))}\n          </Card.Group>\n        </Grid.Column>\n      </Grid>\n    </Tab.Pane>\n  );\n};\n\nexport default observer(ProfileActivities);\n","import React from 'react'\nimport { Tab } from 'semantic-ui-react';\nimport ProfilePhotos from './ProfilePhotos';\nimport ProfileDescription from './ProfileDescription';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfileActivities from './ProfileActivities';\n\ninterface IProps {\n  setActiveTab: (activeIndex: any) => void;\n};\n\nconst panes = [\n  {menuItem: 'About', render: () => <ProfileDescription />},\n  {menuItem: 'Photos', render: () => <ProfilePhotos />},\n  {menuItem: 'Activities', render: () => <ProfileActivities />},\n  {menuItem: 'Followers', render: () => <ProfileFollowings />},\n  {menuItem: 'Following', render: () => <ProfileFollowings />}\n];\n\nconst ProfileContents: React.FC<IProps> = ({setActiveTab}) => {\n  return (\n    <Tab \n      menu={{fluid: true, vertical: true}}\n      menuPosition='right'\n      panes={panes}\n      onTabChange={(e, data) => setActiveTab(data.activeIndex)}\n    />\n  )\n}\n\nexport default ProfileContents;","import React from 'react';\nimport { Dimmer, Loader } from \"semantic-ui-react\";\n\nconst LoadingComponent: React.FC<{ inverted?: boolean; content?: string }> = ({\n  inverted = true,\n  content,\n}) => {\n  return (\n    <Dimmer active inverted={inverted}>\n      <Loader content={content} />\n    </Dimmer>\n  );\n};\n\nexport default LoadingComponent;","import ProfileHeader from \"./ProfileHeader\";\nimport ProfileContents from \"./ProfileContents\";\nimport { Grid } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport { useContext, useEffect } from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\nimport { observer } from \"mobx-react-lite\";\n\ninterface RouteParams {\n  username: string;\n};\n\ninterface IProps extends RouteComponentProps<RouteParams> {}\n\nconst ProfilePage: React.FC<IProps> = ({ match }) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadingProfile,\n    profile,\n    loadProfile,\n    follow,\n    unfollow,\n    isCurrentUser,\n    loading,\n    setActiveTab\n  } = rootStore.profileStore;\n\n  useEffect(() => {\n    loadProfile(match.params.username);\n  }, [loadProfile, match]);\n\n  if (loadingProfile) return <LoadingComponent content=\"Loading Profile\" />;\n\n  return (\n    <div>\n      <Grid>\n        <Grid.Column width={16}>\n          <ProfileHeader\n            profile={profile!}\n            isCurrentUser={isCurrentUser}\n            loading={loading}\n            follow={follow}\n            unfollow={unfollow}\n          />\n          <ProfileContents setActiveTab={setActiveTab}/>\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n\nexport default observer(ProfilePage);\n","import React from 'react'\nimport { List, Image, Popup } from 'semantic-ui-react';\nimport { IAttendee } from '../../../app/models/activity';\n\ninterface IProps {\n  attendees: IAttendee[]\n};\n\nconst styles = {\n  borderColor: 'orange',\n  borderWidth: 2\n};\n\nconst ActivityListItemAttendees: React.FC<IProps> = ({ attendees }) => {\n  return (\n    <List horizontal>\n      {attendees.map(attendee => (\n        <List.Item key={attendee.username}>\n          <Popup \n            header={attendee.displayName}\n            trigger={ \n            <Image \n              size='mini' \n              circular \n              src={attendee.image || '/assets/user.png'} \n              bordered\n              style={attendee.following ? styles : null}\n            />\n          }\n          />\n        </List.Item>\n      ))}\n    </List>\n  )\n}\n\nexport default ActivityListItemAttendees;","import React from \"react\";\nimport { IActivity } from \"../../../app/models/activity\";\nimport { Link } from \"react-router-dom\";\nimport { format } from \"date-fns\";\nimport { Item, Button, Segment, Icon, Label } from \"semantic-ui-react\";\nimport ActivityListItemAttendees from \"./ActivityListItemAttendees\";\n\nconst ActivityListItem: React.FC<{ activity: IActivity }> = ({ activity }) => {\n  const host = activity.attendees.filter((x) => x.isHost)[0];\n\n  return (\n    <Segment.Group>\n      <Segment>\n        <Item.Group>\n          <Item>\n            <Item.Image\n              size=\"tiny\"\n              circular\n              src={host.image || \"/assets/user.png\"}\n              style={{ marginBottom: 3 }}\n            />\n            <Item.Content>\n              <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                {activity.title}\n              </Item.Header>\n              <Item.Description>Hosted by <Link to={`/profile/${host.username}`}> {host.displayName}</Link></Item.Description>\n              {activity.isHost && (\n                <Item.Description>\n                  <Label\n                    basic\n                    color=\"orange\"\n                    content=\"You are hosting this activity\"\n                  />\n                </Item.Description>\n              )}\n              {activity.isGoing && !activity.isHost && (\n                <Item.Description>\n                  <Label\n                    basic\n                    color=\"green\"\n                    content=\"You are going to this activity\"\n                  />\n                </Item.Description>\n              )}\n            </Item.Content>\n          </Item>\n        </Item.Group>\n      </Segment>\n      <Segment>\n        <Icon name=\"clock\" /> {format(activity.date, \"h:mm a\")}\n        <Icon name=\"marker\" /> {activity.venue}, {activity.city}\n      </Segment>\n      <Segment secondary>\n        <ActivityListItemAttendees attendees={activity.attendees} />\n      </Segment>\n      <Segment clearing>\n        <span>{activity.description}</span>\n        <Button\n          as={Link}\n          to={`/activities/${activity.id}`}\n          floated=\"right\"\n          content=\"View\"\n          color=\"blue\"\n        />\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default ActivityListItem;\n","import React, { Fragment, useContext } from \"react\";\nimport ActivityListItem from \"./ActivityListItem\";\nimport { observer } from \"mobx-react-lite\";\nimport { Item, Label } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { format } from 'date-fns';\n\nconst ActivityList: React.FC = () => {\n  const rootStore = useContext(RootStoreContext);\n  const { activitiesByDate } = rootStore.activityStore;\n\n  return (\n    <Fragment>\n      {activitiesByDate.map(([group, activities]) => (\n        <Fragment key={group}>\n          <Label size=\"large\" color=\"blue\">\n            {format(Date.parse(group), 'eeee do MMMM, yyyy')}\n          </Label>\n          <Item.Group divided>\n            {activities.map((activity) => (\n              <ActivityListItem key={activity.id} activity={activity} />\n            ))}\n          </Item.Group>\n        </Fragment>\n      ))}\n    </Fragment>\n  );\n};\n\nexport default observer(ActivityList);\n","import React, { Fragment, useContext } from \"react\";\nimport { Menu, Header } from \"semantic-ui-react\";\nimport { Calendar } from \"react-widgets\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { observer } from \"mobx-react-lite\";\n\nconst ActivityFilters = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {predicate, setPredicate} = rootStore.activityStore;\n\n  return (\n    <Fragment>\n      <Menu vertical size={\"large\"} style={{ width: \"100%\", marginTop: 50 }}>\n        <Header icon={\"filter\"} attached color={\"teal\"} content={\"Filters\"} />\n        <Menu.Item active={predicate.size === 0} onClick={() => setPredicate('all', 'true')} color={\"blue\"} name={\"all\"} content={\"All Activities\"} />\n        <Menu.Item active={predicate.has('isGoing')} onClick={() => setPredicate('isGoing', 'true')} color={\"blue\"} name={\"username\"} content={\"I'm Going\"} />\n        <Menu.Item active={predicate.has('isHost')} onClick={() => setPredicate('isHost', 'true')} color={\"blue\"} name={\"host\"} content={\"I'm Hosting\"} />\n      </Menu>\n      <Header\n        icon={\"calendar\"}\n        attached\n        color={\"teal\"}\n        content={\"Select Date\"}\n      />\n      <Calendar \n        onChange={(date) => setPredicate('startDate', date!)}\n        value={predicate.get('startDate') || new Date()}\n      />\n    </Fragment>\n  );\n};\n\nexport default observer(ActivityFilters);\n","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\nconst ActivityListItemPlaceholder = () => {\n  return (\n    <Fragment>\n      <Placeholder fluid style={{ marginTop: 50 }}>\n        <Segment.Group>\n          <Segment style={{ minHeight: 110 }}>\n            <Placeholder>\n              <Placeholder.Header image>\n                <Placeholder.Line />\n                <Placeholder.Line />\n              </Placeholder.Header>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          </Segment>\n          <Segment>\n            <Placeholder>\n              <Placeholder.Line />\n              <Placeholder.Line />\n            </Placeholder>\n          </Segment>\n          <Segment secondary style={{ minHeight: 70 }} />\n          <Segment clearing>\n            <Button disabled color='blue' floated='right' content='View' />\n          </Segment>\n        </Segment.Group>\n      </Placeholder>\n    </Fragment>\n  );\n};\nexport default ActivityListItemPlaceholder;","import React, { useContext, useEffect, useState } from \"react\";\nimport ActivityList from \"./ActivityList\";\nimport { Grid, Loader } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport ActivityFilters from \"./ActivityFilters\";\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\n\nconst ActivityDashboard: React.FC = () => {\n  const [loadingNext, setLoadingNext] = useState(false);\n  const rootStore = useContext(RootStoreContext);\n  const {\n    loadActivities,\n    loadingInitial,\n    setPage,\n    page,\n    totalPages,\n  } = rootStore.activityStore;\n\n  const handleGetNext = () => {\n    setLoadingNext(true);\n    setPage(page + 1); // in our activityStore\n    loadActivities().then(() => setLoadingNext(false));\n  };\n\n  useEffect(() => {\n    loadActivities();\n  }, [loadActivities]);\n  // [] makes sure the useEffect never runs more than once\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        {loadingInitial && page === 0 ? (\n          <ActivityListItemPlaceholder />\n        ) : (\n          <InfiniteScroll\n            pageStart={0}\n            loadMore={handleGetNext}\n            hasMore={!loadingNext && page + 1 < totalPages}\n            initialLoad={false}\n          >\n            <ActivityList />\n          </InfiniteScroll>\n        )}\n      </Grid.Column>\n      <Grid.Column width={6}>\n        <ActivityFilters />\n      </Grid.Column>\n      <Grid.Column width={10}>\n        <Loader active={loadingNext} />\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDashboard);\n","export const category = [\n  { key: 'drinks', text: 'Drinks', value: 'drinks' },\n  { key: 'culture', text: 'Culture', value: 'culture' },\n  { key: 'film', text: 'Film', value: 'film' },\n  { key: 'food', text: 'Food', value: 'food' },\n  { key: 'music', text: 'Music', value: 'music' },\n  { key: 'travel', text: 'Travel', value: 'travel' }\n];","// Interfaces usually start with I\n// Interfaces are used solely for Type checking\n\nexport interface IActivitiesEnvelope {\n  activities: IActivity[];\n  activityCount: number;\n}\n\nexport interface IActivity {\n  id: string;\n  title: string;\n  description: string;\n  category: string;\n  date: any;\n  city: string;\n  venue: string;\n  // Both bottom two are properties that are specific to the current login user \n  isGoing: boolean;\n  isHost: boolean;\n  attendees: IAttendee[];\n  comments: IComment[];\n};\n\nexport interface IComment {\n  id: string;\n  createdAt: Date;\n  body: string;\n  username: string;\n  displayName: string;\n  image: string;\n};\n\n// Partial indicates all the keys we pass in from IActivity will be optional\nexport interface IActivityFormValues extends Partial<IActivity> {\n  time?: Date;\n};\n\nexport class ActivityFormValues implements IActivityFormValues {\n  id?: string = undefined;\n  title: string = \"\";\n  category: string = \"\";\n  description: string = \"\";\n  date?: Date = undefined;\n  time?: Date = undefined;\n  city: string = \"\";\n  venue: string = \"\";\n  \n  constructor(init?: IActivityFormValues) {\n    if (init && init.date) {\n      init.time = init.date\n    }\n    Object.assign(this, init);\n  };\n};\n\nexport interface IAttendee {\n  username: string;\n  displayName: string;\n  image: string;\n  isHost: boolean;\n  following?: boolean;\n};","import React from 'react';\nimport { FieldRenderProps } from \"react-final-form\";\nimport { Form, FormFieldProps, Label, Select } from \"semantic-ui-react\";\n\ninterface IProps\n  extends FieldRenderProps<string, HTMLElement>,\n    FormFieldProps {}\n\nconst SelectInput: React.FC<IProps> = ({\n  input,\n  width,\n  options,\n  placeholder,\n  meta: { touched, error },\n}) => {\n  return (\n    <Form.Field error={touched && !!error} width={width}>\n      <Select \n        value={input.value}\n        onChange={(e, data) => input.onChange(data.value)}\n        placeholder={placeholder}\n        options={options}\n      />\n      {touched && error && (\n        <Label basic color=\"red\">\n          {error}\n        </Label>\n      )}\n    </Form.Field>\n  );\n};\n\nexport default SelectInput;\n","import React from 'react';\nimport { FieldRenderProps } from \"react-final-form\";\nimport { Form, FormFieldProps, Label } from \"semantic-ui-react\";\nimport { DateTimePicker } from 'react-widgets';\n\ninterface IProps\n  extends FieldRenderProps<Date, HTMLElement>,\n    FormFieldProps {}\n\nconst DateInput: React.FC<IProps> = ({\n  id = null,\n  input,\n  width,\n  placeholder,\n  date = false,\n  time = false,\n  meta: { touched, error },\n  // Will give access to the rest of the properties of the DateTimePicker\n  ...rest\n}) => {\n  return (\n    // !!error Will turn the value into a boolean\n    <Form.Field error={touched && !!error}  width={width}>\n      <DateTimePicker \n        placeholder={placeholder}\n        value={input.value || null}\n        onChange={input.onChange}\n        onBlur={input.onBlur}\n        onKeyDown={(event) => event.preventDefault()}\n        date={date}\n        time={time}\n        {...rest}\n      />\n    {touched && error && (\n      <Label basic color='red'>\n        {error}\n      </Label>\n    )}\n  </Form.Field>\n  );\n};\n\nexport default DateInput;","import React, { useContext, useEffect, useState } from \"react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { category } from \"../../../app/common/options/cateogoryOptions\";\nimport { ActivityFormValues } from \"../../../app/models/activity\";\nimport { combineDateAndTime } from \"../../../app/common/util/util\";\nimport TextInput from \"../../../app/common/form/TextInput\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport SelectInput from \"../../../app/common/form/SelectInput\";\nimport DateInput from \"../../../app/common/form/DateInput\";\nimport { Button, Form, Grid, Segment } from \"semantic-ui-react\";\nimport { v4 as uuid } from \"uuid\";\nimport { observer } from \"mobx-react-lite\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport {combineValidators, composeValidators, hasLengthGreaterThan, isRequired} from 'revalidate';\n\nconst validate = combineValidators({\n  title: isRequired({message: 'Title is Required'}),\n  category: isRequired({message: 'Category is Required'}),\n  description: composeValidators(\n    isRequired({message: 'Description is Required'}),\n    hasLengthGreaterThan(4)({message: 'Description Needs to be at Least Five Characters'})\n  )(),\n  city: isRequired({message: 'City is Required'}),\n  venue: isRequired({message: 'Venue is Required'}),\n  date: isRequired({message: 'Date is Required'}),\n  time: isRequired({message: 'Time is Required'})\n});\n\ninterface DetailParams {\n  id: string;\n}\n\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    createActivity,\n    editActivity,\n    submitting,\n    loadActivity\n  } = rootStore.activityStore;\n\n  const [activity, setActivity] = useState(new ActivityFormValues());\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    if (match.params.id) {\n      setLoading(true);\n      loadActivity(match.params.id)\n        .then((activity) => setActivity(new ActivityFormValues(activity)))\n        .finally(() => setLoading(false));\n    }\n  }, [loadActivity, match.params.id]);\n\n  const handleFinalFormSubmit = (values: any) => {\n    const dateAndTime = combineDateAndTime(values.date, values.time);\n    // Logging the combined date and time, not separately\n    const { date, time, ...activity } = values;\n    activity.date = dateAndTime;\n    if (!activity.id) {\n      let newActivity = {\n        ...activity,\n        id: uuid(),\n      };\n      createActivity(newActivity);\n    } else {\n      editActivity(activity);\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <Segment clearing>\n          <FinalForm\n            validate={validate}\n            initialValues={activity}\n            onSubmit={handleFinalFormSubmit}\n            render={({ handleSubmit, invalid, pristine }) => (\n              <Form onSubmit={handleSubmit} loading={loading}>\n                <Field\n                  name=\"title\"\n                  placeholder=\"Title\"\n                  value={activity.title}\n                  component={TextInput}\n                />\n                <Field\n                  placeholder=\"Description\"\n                  name=\"description\"\n                  rows={3}\n                  value={activity.description}\n                  component={TextAreaInput}\n                />\n                <Field\n                  component={SelectInput}\n                  options={category}\n                  name=\"category\"\n                  placeholder=\"Category\"\n                  value={activity.category}\n                />\n                <Form.Group widths=\"equal\">\n                  <Field\n                    component={DateInput}\n                    name=\"date\"\n                    date={true}\n                    placeholder=\"Date\"\n                    value={activity.date}\n                  />\n                  <Field\n                    component={DateInput}\n                    name=\"time\"\n                    time={true}\n                    placeholder=\"Time\"\n                    value={activity.time}\n                  />\n                </Form.Group>\n                <Field\n                  component={TextInput}\n                  name=\"city\"\n                  placeholder=\"City\"\n                  value={activity.city}\n                />\n                <Field\n                  component={TextInput}\n                  name=\"venue\"\n                  placeholder=\"Venue\"\n                  value={activity.venue}\n                />\n                <Button\n                  loading={submitting}\n                  disabled={loading || invalid || pristine}\n                  floated=\"right\"\n                  positive\n                  type=\"submit\"\n                  content=\"Submit\"\n                />\n                <Button\n                  onClick={\n                    activity.id\n                      ? () => history.push(`/activities/${activity.id}`)\n                      : () => history.push(\"/activities\")\n                  }\n                  disabled={loading}\n                  floated=\"right\"\n                  type=\"button\"\n                  content=\"Cancel\"\n                />\n              </Form>\n            )}\n          />\n        </Segment>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityForm);\n","import React, { Fragment, useContext, useEffect } from \"react\";\nimport { Segment, Header, Form, Button, Comment } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport { Form as FinalForm, Field } from \"react-final-form\";\nimport { Link } from \"react-router-dom\";\nimport TextAreaInput from \"../../../app/common/form/TextAreaInput\";\nimport { observer } from \"mobx-react-lite\";\nimport { formatDistance } from 'date-fns';\n\nconst ActivityDetailChat = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {\n    createHubConnection,\n    stopHubConnection,\n    activity,\n    addComment,\n  } = rootStore.activityStore;\n\n  useEffect(() => {\n    createHubConnection(activity!.id);\n    return () => {\n      stopHubConnection();\n    };\n  }, [createHubConnection, stopHubConnection, activity]);\n\n  return (\n    <Fragment>\n      <Segment\n        textAlign=\"center\"\n        attached=\"top\"\n        inverted\n        color=\"teal\"\n        style={{ border: \"none\" }}\n      >\n        <Header>Chat about this event</Header>\n      </Segment>\n      <Segment attached>\n        <Comment.Group>\n          {activity &&\n            activity.comments &&\n            activity.comments.map((comment) => (\n              <Comment key={comment.id}>\n                <Comment.Avatar src={comment.image || \"/assets/user.png\"} />\n                <Comment.Content>\n                  <Comment.Author\n                    as={Link}\n                    to={`/profiles/${comment.username}`}\n                  >\n                    {comment.displayName}\n                  </Comment.Author>\n                  <Comment.Metadata>\n                    <div>{formatDistance(new Date(comment.createdAt), new Date())}</div>\n                  </Comment.Metadata>\n                  <Comment.Text>{comment.body}</Comment.Text>\n                </Comment.Content>\n              </Comment>\n            ))}\n          <FinalForm\n            onSubmit={addComment}\n            render={({ handleSubmit, submitting, form }) => (\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\n                <Field \n                  name='body'\n                  component={TextAreaInput}\n                  rows={2}\n                  placeholder=\"Add Your Comment\"\n                />\n                <Button\n                  content=\"Add Reply\"\n                  labelPosition=\"left\"\n                  icon=\"edit\"\n                  primary\n                  loading={submitting}\n                />\n              </Form>\n            )}\n          />\n        </Comment.Group>\n      </Segment>\n    </Fragment>\n  );\n};\n\nexport default observer(ActivityDetailChat);\n","import React, { useContext } from \"react\";\nimport { IActivity } from \"../../../app/models/activity\";\nimport { format } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Header, Item, Segment, Image } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\n\nconst activityImageStyle = {\n  filter: \"brightness(30%)\",\n};\n\nconst activityImageTextStyle = {\n  position: \"absolute\",\n  bottom: \"5%\",\n  left: \"5%\",\n  width: \"100%\",\n  height: \"auto\",\n  color: \"white\",\n};\n\nconst ActivityDetailHeader: React.FC<{ activity: IActivity }> = ({\n  activity,\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { attendActivity, cancelAttendance, loading } = rootStore.activityStore;\n  const host = activity.attendees.filter((x) => x.isHost)[0];\n\n  return (\n    <div>\n      <Segment.Group>\n        <Segment basic attached=\"top\" style={{ padding: \"0\" }}>\n          <Image\n            src={`/assets/categoryImages/${activity.category}.jpg`}\n            fluid\n            style={activityImageStyle}\n          />\n          {/* Without the basic part, the image text would have the default styling covering the image where not needed */}\n          <Segment basic style={activityImageTextStyle}>\n            <Item.Group>\n              <Item>\n                <Item.Content>\n                  <Header\n                    size=\"huge\"\n                    content={activity.title}\n                    style={{ color: \"white\" }}\n                  />\n                  <p>{format(activity.date, \"eeee do MMMM\")}</p>\n                  <p>\n                    Hosted by{\" \"}\n                    <Link to={`/profile/${host.username}`}>\n                      <strong>{host.displayName}</strong>\n                    </Link>\n                  </p>\n                </Item.Content>\n              </Item>\n            </Item.Group>\n          </Segment>\n        </Segment>\n        <Segment clearing attached=\"bottom\">\n          {activity.isHost ? (\n            <Button\n              as={Link}\n              to={`/manage/${activity.id}`}\n              color=\"orange\"\n              floated=\"right\"\n            >\n              Manage Event\n            </Button>\n          ) : activity.isGoing ? (\n            <Button loading={loading} onClick={cancelAttendance}>\n              Cancel Attendance\n            </Button>\n          ) : (\n            <Button loading={loading} onClick={attendActivity} color=\"teal\">\n              Join Activity\n            </Button>\n          )}\n        </Segment>\n      </Segment.Group>\n    </div>\n  );\n};\n\nexport default observer(ActivityDetailHeader);\n","import React from 'react';\nimport { IActivity } from \"../../../app/models/activity\";\nimport { format } from \"date-fns\";\nimport { observer } from \"mobx-react-lite\";\nimport { Segment, Grid, Icon } from \"semantic-ui-react\";\n\nconst ActivityDetailInfo: React.FC<{activity: IActivity}> = ({ activity }) => {\n  return (\n    <div>\n      <Segment.Group>\n            <Segment attached='top'>\n              <Grid>\n                <Grid.Column width={1}>\n                  <Icon size='large' color='teal' name='info' />\n                </Grid.Column>\n                <Grid.Column width={15}>\n                  <p>{activity.description}</p>\n                </Grid.Column>\n              </Grid>\n            </Segment>\n            <Segment attached>\n              <Grid verticalAlign='middle'>\n                <Grid.Column width={1}>\n                  <Icon name='calendar' size='large' color='teal' />\n                </Grid.Column>\n                <Grid.Column width={15}>\n                  <span>\n                    {format(activity.date, 'eeee do MMMM')} at {format(activity.date, 'h: mm a')}\n                  </span>\n                </Grid.Column>\n              </Grid>\n            </Segment>\n            <Segment attached>\n              <Grid verticalAlign='middle'>\n                <Grid.Column width={1}>\n                  <Icon name='marker' size='large' color='teal' />\n                </Grid.Column>\n                <Grid.Column width={11}>\n                  <span>{activity.venue}, {activity.city}</span>\n                </Grid.Column>\n              </Grid>\n            </Segment>\n          </Segment.Group>\n    </div>\n  )\n}\n\nexport default observer(ActivityDetailInfo);","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Item, Image, Segment, Label, List } from \"semantic-ui-react\";\nimport { IAttendee } from \"../../../app/models/activity\";\n\ninterface IProps {\n  attendees: IAttendee[];\n}\n\nconst ActivityDetailSidebar: React.FC<IProps> = ({ attendees }) => {\n  return (\n    <Fragment>\n      <Segment\n        textAlign=\"center\"\n        style={{ border: \"none\" }}\n        attached=\"top\"\n        secondary\n        inverted\n        color=\"teal\"\n      >\n        {attendees.length} {attendees.length === 1 ? \"Person\" : \"People\"} Going\n      </Segment>\n      <Segment attached>\n        <List relaxed divided>\n          {attendees.map((attendee) => (\n            <Item key={attendee.username} style={{ position: \"relative\" }}>\n              {attendee.isHost && (\n                <Label\n                  style={{ position: \"absolute\" }}\n                  color=\"orange\"\n                  ribbon=\"right\"\n                >\n                  Host\n                </Label>\n              )}\n              <Image size=\"tiny\" src={attendee.image || \"/assets/user.png\"} />\n              <Item.Content verticalAlign=\"middle\">\n                <Item.Header as=\"h3\">\n                  <Link to={`/profile/${attendee.username}`}>\n                    {attendee.displayName}\n                  </Link>\n                </Item.Header>\n                {attendee.following && \n                <Item.Extra style={{ color: \"orange\" }}>Following</Item.Extra>}\n              </Item.Content>\n            </Item>\n          ))}\n        </List>\n      </Segment>\n    </Fragment>\n  );\n};\n\nexport default observer(ActivityDetailSidebar);\n","import React, { useContext, useEffect } from \"react\";\nimport { RootStoreContext } from \"../../../app/stores/rootStore\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport ActivityDetailChat from \"./ActivityDetailChat\";\nimport ActivityDetailHeader from \"./ActivityDetailHeader\";\nimport ActivityDetailInfo from \"./ActivityDetailInfo\";\nimport ActivityDetailSidebar from \"./ActivityDetailSidebar\";\nimport { observer } from \"mobx-react-lite\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\n\ninterface DetailParams {\n  id: string;\n}\n\nconst ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({\n  match,\n  history\n}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { activity, loadActivity, loadingInitial } = rootStore.activityStore;\n\n  useEffect(() => {\n    loadActivity(match.params.id)\n  }, [loadActivity, match.params.id]);\n\n  if (loadingInitial || !activity)\n    return <LoadingComponent content=\"Loading Activity...\" />;\n\n  if (!activity)\n    return <h2>Activity Not Found</h2>;\n\n  return (\n    <Grid>\n      <Grid.Column width={10}>\n        <ActivityDetailHeader activity={activity}/>\n        <ActivityDetailInfo activity={activity} />\n        <ActivityDetailChat />\n      </Grid.Column>\n      <Grid.Column width={6}>\n        <ActivityDetailSidebar attendees={activity.attendees}/>\n      </Grid.Column>\n    </Grid>\n  );\n};\n\nexport default observer(ActivityDetails);\n","import React from 'react';\nimport { Segment, Button, Header, Icon } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere but couldn't find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to Activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    );\n};\n\nexport default NotFound;","import { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { Modal } from \"semantic-ui-react\";\nimport { RootStoreContext } from \"../../stores/rootStore\";\n\nconst ModalContainer = () => {\n  const rootStore = useContext(RootStoreContext);\n  const {modal: {open, body}, closeModal} = rootStore.modalStore;\n  return (\n    <Modal open={open} onClose={closeModal} size='mini'> \n      <Modal.Content>\n        {body}\n      </Modal.Content>\n    </Modal>\n  );\n};\n\nexport default observer(ModalContainer);","import React, { useContext } from \"react\"\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\"\nimport { RootStoreContext } from \"../stores/rootStore\";\n\ninterface IProps extends RouteProps {\n  component: React.ComponentType<RouteComponentProps<any>>\n};\n\nconst PrivateRoute: React.FC<IProps> = ({component: Component, ...rest}) => {\n  const rootStore = useContext(RootStoreContext);\n  const { isLoggedIn } = rootStore.userStore;\n  \n  return (\n    <Route \n      {...rest}\n      render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to={'/'} />}\n    />\n  )\n}\n\nexport default PrivateRoute\n","import React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport queryString from \"query-string\";\nimport { Icon, Segment, Header, Button } from \"semantic-ui-react\";\nimport agent from \"../../app/api/agent\";\nimport { toast } from \"react-toastify\";\n\nconst RegisterSuccess: React.FC<RouteComponentProps> = ({ location }) => {\n  const { email } = queryString.parse(location.search);\n\n  const handleConfirmEmailResend = () => {\n    agent.User.resendVerifyEmailConfirm(email as string)\n      .then(() => {\n        toast.success(\"Verification email resent. Please check your email.\");\n      })\n      .catch((error) => console.log(error));\n  };\n\n  return (\n    <Segment placeholder>\n      <Header icon>\n        <Icon name=\"check\" />\n        Successfully registered!\n      </Header>\n      <Segment.Inline>\n        <div className=\"center\">\n          <p>\n            Please check your email (Including your junk folder) for the\n            verification email\n          </p>\n          {email && (\n            <>\n              <p>\n                Didn't receive the email? Please click below button to resend.\n              </p>\n              <Button\n                onClick={handleConfirmEmailResend}\n                primary\n                content=\"Resend Email\"\n                size=\"huge\"\n              />\n            </>\n          )}\n        </div>\n      </Segment.Inline>\n    </Segment>\n  );\n};\n\nexport default RegisterSuccess;","import React, { useContext, useEffect, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { RootStoreContext } from \"../../app/stores/rootStore\";\nimport queryString from \"query-string\";\nimport agent from \"../../app/api/agent\";\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\nimport LoginForm from \"./LoginForm\";\nimport { toast } from \"react-toastify\";\n\nconst VerifyEmail: React.FC<RouteComponentProps> = ({ location }) => {\n  const rootStore = useContext(RootStoreContext);\n  const Status = {\n    Verifying: \"Verifying\",\n    Failed: \"Failed\",\n    Success: \"Success\",\n  };\n\n  const [status, setStatus] = useState(Status.Verifying);\n  const { openModal } = rootStore.modalStore;\n  const { token, email } = queryString.parse(location.search);\n\n  useEffect(() => {\n    agent.User.verifyEmail(token as string, email as string)\n      .then(() => {\n        setStatus(Status.Success);\n      })\n      .catch(() => {\n        setStatus(Status.Failed);\n      });\n  }, [Status.Failed, Status.Success, token, email]);\n\n  const handleConfirmEmailResend = () => {\n    agent.User.resendVerifyEmailConfirm(email as string)\n      .then(() => {\n        toast.success(\"Verification email resent. Please check your email.\");\n      })\n      .catch((error) => console.log(error));\n  };\n\n  const getBody = () => {\n    switch (status) {\n      case Status.Verifying:\n        return <p> Verifying...</p>;\n      case Status.Failed:\n        return (\n          <div className=\"center\">\n            <p>\n              Verification failed. You can try resending the verification email.\n            </p>\n            <Button\n              onClick={handleConfirmEmailResend}\n              primary\n              size=\"huge\"\n              content=\"Resend Email\"\n            />\n          </div>\n        );\n      case Status.Success:\n        return (\n          <div className=\"center\">\n            <p>Email has been verified. You can login</p>\n            <Button\n              onClick={() => openModal(<LoginForm />)}\n              primary\n              size=\"large\"\n              content=\"Login\"\n            />\n          </div>\n        );\n    }\n  };\n\n  return (\n    <Segment placeholder>\n      <Header icon>\n        <Icon name=\"envelope\" />\n        Email Verification\n      </Header>\n      <Segment.Inline>{getBody()}</Segment.Inline>\n    </Segment>\n  );\n};\n\nexport default VerifyEmail;\n","import React, { Fragment, useContext, useEffect } from \"react\";\nimport NavBar from \"../../features/nav/NavBar\";\nimport HomePage from \"../../features/home/HomePage\";\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport ActivityDashboard from \"../../features/activities/dashboard/ActivityDashboard\";\nimport ActivityForm from \"../../features/activities/form/ActivityForm\";\nimport ActivityDetails from \"../../features/activities/details/ActivityDetails\";\nimport NotFound from \"./NotFound\";\nimport { Container } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Route, Switch, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { ToastContainer } from 'react-toastify';\nimport \"./styles.css\";\nimport { RootStoreContext } from \"../stores/rootStore\";\nimport LoadingComponent from \"./LoadingComponent\";\nimport ModalContainer from \"../common/modals/ModalContainer\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport RegisterSuccess from \"../../features/user/RegisterSuccess\";\nimport VerifyEmail from \"../../features/user/VerifyEmail\";\n\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { setAppLoaded, token, appLoaded } = rootStore.commonStore;\n  const {getUser} = rootStore.userStore;\n\n  useEffect(() => {\n    if (token && !appLoaded) {\n      getUser().finally(() => setAppLoaded());\n    } else {\n      setAppLoaded();\n    }\n  }, [getUser, setAppLoaded, token, appLoaded]);\n\n  if (!appLoaded) return <LoadingComponent content='Loading App...' />\n\n  return (\n    <Fragment>\n      <ModalContainer />\n      <ToastContainer position='bottom-right'/>\n      <Route exact path=\"/\" component={HomePage} />\n      {/* This path is for redirecting to a page that is anything other than the home page. To Render the home page outside the navbar */}\n      <Route\n        path={\"/(.+)\"}\n        render={() => (\n          <Fragment>\n            <NavBar />\n            <Container style={{ marginTop: \"7em\" }}>\n              <Switch>\n                <PrivateRoute exact path=\"/activities\" component={ActivityDashboard} />\n                <PrivateRoute path=\"/activities/:id\" component={ActivityDetails} />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/createActivity\", \"/manage/:id\"]}\n                  component={ActivityForm}\n                />\n                <PrivateRoute path='/profile/:username' component={ProfilePage} />\n                <Route path='/user/registerSuccess' component={RegisterSuccess}  />\n                <Route path='/user/verifyEmail' component={VerifyEmail} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </Fragment>\n        )}\n      />\n    </Fragment>\n  );\n};\n\n// the app now serves as an observer of the activity store\n// withRouter gives the location prop access to the APP\nexport default withRouter(observer(App));\n","import { useEffect } from 'react'\nimport { useLocation } from 'react-router-dom';\n\nconst ScrollToTop = () => {\n  const { pathname } = useLocation();\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname])\n\n  return null;\n};\n\nexport default ScrollToTop;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app/layout/App\";\nimport ScrollToTop from \"./app/layout/ScrollToTop\";\nimport { Router } from \"react-router-dom\";\nimport { createBrowserHistory } from 'history';\nimport dateFnsLocalizer from 'react-widgets-date-fns';\nimport reportWebVitals from \"./reportWebVitals\";\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport \"./app/layout/styles.css\";\nimport \"semantic-ui-css/semantic.min.css\";\n\ndateFnsLocalizer();\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <Router history={history}>\n    <ScrollToTop />\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}